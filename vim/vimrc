" Make vim more useful
set nocompatible
" Enhance command-line completion
set wildmenu
" Allow cursor keys in insert mode
set esckeys
" Optimize for fast terminal connections
set ttyfast
" Add the g flag to search/replace by default
set gdefault
" Use UTF-8 without BOM
set encoding=utf-8 nobomb
" Change mapleader
let mapleader=","
" Don’t add empty newlines at the end of files
set binary
set noeol
" Centralize backups, swapfiles and undo history
"set backupdir=~/.vim/backups
"set directory=~/.vim/swaps
"if exists("&undodir")
"   set undodir=~/.vim/undo
"endif

" Enable line numbers
set number
" Enable syntax highlighting
syntax on
" Highlight current line
set cursorline
" Make tabs as wide as four spaces
set tabstop=4
" Show “invisible” characters
set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
set list
" Highlight searches
set hlsearch
" Ignore case of searches
set ignorecase
" Highlight dynamically as pattern is typed
set incsearch
" Always show status line
set laststatus=2
" Enable mouse in all modes
set mouse=a
" Disable error bells
set noerrorbells
" Don’t reset cursor to start of line when moving around.
set nostartofline
" Show the cursor position
set ruler
" Don’t show the intro message when starting vim
set shortmess=atI
" Show the current mode
set showmode
" Show the filename in the window titlebar
set title
" Show the (partial) command as it’s being typed
set showcmd
" Use relative line numbers
if exists("&relativenumber")
    set relativenumber
    au BufReadPost * set relativenumber
endif
" Start scrolling three lines before the horizontal window border
set scrolloff=3

" For docker mounting. https://github.com/docker/docker/issues/15793
set noswapfile
set backupcopy=yes

" Strip trailing whitespace (,ss)
function! StripWhitespace()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    :%s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfunction
noremap <leader>ss :call StripWhitespace()<CR>
" Save a file as root (,W)
noremap <leader>W :w !sudo tee % > /dev/null<CR>

" Automatic commands
if has("autocmd")
    " Enable file type detection
    filetype on
    " Treat .json files as .js
    autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
    filetype indent on "Added ?
    filetype plugin on "Added
endif

retab
set shiftwidth=4
set expandtab
set autoindent
set smartindent
set smartcase
set showmatch

" Additional vim syntax stuff
au BufRead,BufNewFile *.thrift set filetype=thrift

set bg=dark
set background=dark

" Vundle stuff
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'flazz/vim-colorschemes'
Plugin 'tpope/vim-fugitive'
Plugin 'Lokaltog/vim-powerline'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'kien/ctrlp.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'airblade/vim-gitgutter'
Plugin 'majutsushi/tagbar'
Plugin 'derekwyatt/vim-scala'
Plugin 'camelcasemotion'
Plugin 'MultipleSearch'
Plugin 'fatih/vim-go'
Plugin 'rking/ag.vim'
Plugin 'rust-lang/rust.vim'

" All of your Plugins must be added before the following line
call vundle#end()           " required
filetype plugin indent on   " required


set laststatus=2
set encoding=utf-8
set t_Co=256
set guifont=Menlo\ Regular\ for\ Powerline
let g:Powerline_symbols = 'fancy'

nmap <F2> :NERDTreeToggle<CR>
autocmd vimenter * if !argc() | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

filetype plugin indent on

nmap <F3> :TagbarToggle<CR>

set backspace=2
colorscheme molokai
let g:molokai_original = 1

" Updates location list....
" Might interfere with other plugins
let g:syntastic_always_populate_loc_list = 1


" let g:ycm_min_num_of_chars_for_completion = 200000
let g:ycm_server_use_vim_stdout = 1
let g:ycm_server_log_level = 'debug'

" Search colors
let g:MultipleSearchColorSequence='red,blue,green,magenta,cyan,gray,brown'
let g:MultipleSearchTextColorSequence='white,white,black,white,white,white,white'
" let g:ycm_path_to_python_interpreter='/usr/local/bin/python'
let g:EclimCompletionMethod = 'omnifunc'


" Java ctags?
autocmd FileType java set tags=~/.tags
set tags=tags;/

" XML tags?
" let g:xml_syntax_folding = 1
au FileType xml setlocal foldmethod=syntax

" AG config
let g:ag_working_path_mode="r"

" Try jk as escpae
inoremap jk <Esc>`^
